services:
  # --- Database ---
  postgres:
    image: postgres:16-alpine
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./exports:/exports
    env_file:
      - ./.env
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Zookeeper ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Kafka ---
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Simplified configuration for better reliability
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # Reduce startup time and resource usage
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_RETENTION_BYTES: 104857600
      KAFKA_LOG_SEGMENT_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test:
        ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # --- Redis ---
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # --- Backend ---
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.oracle
    working_dir: /app
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy  # Changed to healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      REDIS_URL: redis://redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DEBUG: "True"
      PYTHONPATH: /app
      LD_LIBRARY_PATH: /opt/oracle/instantclient_21_1
      TNS_ADMIN: /opt/oracle/instantclient_21_1/network/admin
    networks:
      - app-network
      - monitoring_network
    # Add restart policy for stability
    restart: unless-stopped

  # --- Kafka UI ---
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network
    restart: unless-stopped
  
  # # Optional: Oracle Database for testing (if you don't have external Oracle)
  # oracle-test:
  #   image: gvenzl/oracle-xe:21-slim
  #   environment:
  #     ORACLE_PASSWORD: oracle_password
  #     APP_USER: testuser
  #     APP_USER_PASSWORD: testpass
  #   ports:
  #     - "1521:1521"
  #   volumes:
  #     - oracle_data:/opt/oracle/oradata
  #     - ./oracle-init:/docker-entrypoint-initdb.d
  #   networks:
  #     - app-network

  # --- Frontend ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_started
    networks:
      - app-network
    command: npm start -- --host 0.0.0.0 --disable-host-check
    restart: unless-stopped

  # --- Simulated servers ---
  server1:
    build:
      context: ./backend
      dockerfile: Dockerfile.simulated_server
    container_name: server1
    hostname: server1
    networks:
      monitoring_network:
        ipv4_address: 172.20.0.101
    restart: unless-stopped

  # server2:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.simulated_server
  #   container_name: server2
  #   hostname: server2
  #   networks:
  #     monitoring_network:
  #       ipv4_address: 172.20.0.102
  #   restart: unless-stopped

  # server3:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.simulated_server
  #   container_name: server3
  #   hostname: server3
  #   networks:
  #     monitoring_network:
  #       ipv4_address: 172.20.0.103
  #   restart: unless-stopped

volumes:
  frontend_node_modules:
  oracle_data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24 
# .devcontainer/docker-compose.dev.yml
# Development-specific services and overrides

services:
  # Development backend service
  backend-dev:
    build:
      context: D:\projet\backend
      dockerfile: Dockerfile.oracle

    working_dir: /workspace
    volumes:
      # Mount the entire project root
      - ..:/workspace:cached
      # Use named volume for Python cache
      - dev_python_cache:/root/.cache/pip
      - dev_python_cache:/home/vscode/.cache/pip
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - DEBUG=True
      - DEVELOPMENT_MODE=True
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LD_LIBRARY_PATH=/opt/oracle/instantclient_21_1
      - TNS_ADMIN=/opt/oracle/instantclient_21_1/network/admin
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-devdb}
      - POSTGRES_USER=${POSTGRES_USER:-devuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-devpass}
    networks:
      - app-network
      - monitoring_network
    command: >
      bash -c "
        echo 'üöÄ Starting development environment...' &&
        cd /workspace/backend &&
        pip install --no-cache-dir watchdog django-extensions ipython &&
        echo '‚è≥ Waiting for database...' &&
        python -c 'import time, psycopg2, os; [time.sleep(2) for _ in range(30) if True in [print(f\"Attempt {_+1}/30\") or True, exec(\"try:\n  psycopg2.connect(host=os.environ.get(\\\"POSTGRES_HOST\\\", \\\"postgres\\\"), port=5432, user=os.environ.get(\\\"POSTGRES_USER\\\", \\\"devuser\\\"), password=os.environ.get(\\\"POSTGRES_PASSWORD\\\", \\\"devpass\\\"), database=os.environ.get(\\\"POSTGRES_DB\\\", \\\"devdb\\\")).close(); exit()\nexcept: pass\")]]' &&
        echo 'üóÉÔ∏è Running migrations...' &&
        python manage.py makemigrations --noinput &&
        python manage.py migrate --noinput &&
        echo 'üåü Starting development server...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Override the main services with development settings
  postgres:
    environment:
      POSTGRES_DB: devdb
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data
      - ../exports:/exports:cached

  redis:
    command: redis-server --appendonly yes --maxmemory 256mb
    volumes:
      - dev_redis_data:/data

volumes:
  dev_python_cache:
  dev_postgres_data:
  dev_redis_data:
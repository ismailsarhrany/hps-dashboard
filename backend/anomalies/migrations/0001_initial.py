# Generated by Django 5.2 on 2025-09-01 15:57

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('metrics', '0002_alter_oracledatabase_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnomalyDetectionResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('server_id', models.UUIDField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('is_anomaly', models.BooleanField()),
                ('anomaly_score', models.FloatField(help_text='Raw anomaly score from model')),
                ('metric_values', models.JSONField(help_text='Metric values at time of detection')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'anomaly_detection_results',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='anomaly_det_timesta_dbd75c_idx'), models.Index(fields=['is_anomaly'], name='anomaly_det_is_anom_674354_idx'), models.Index(fields=['anomaly_score'], name='anomaly_det_anomaly_14f353_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnomalyModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('model_type', models.CharField(choices=[('lstm_autoencoder', 'LSTM Autoencoder'), ('isolation_forest', 'Isolation Forest'), ('one_class_svm', 'One-Class SVM'), ('statistical_control', 'Statistical Control'), ('ensemble', 'Ensemble Model')], max_length=50)),
                ('version', models.CharField(default='1.0.0', max_length=20)),
                ('status', models.CharField(choices=[('training', 'Training'), ('ready', 'Ready'), ('failed', 'Failed'), ('outdated', 'Outdated')], default='training', max_length=20)),
                ('config', models.JSONField(default=dict, help_text='Model hyperparameters and configuration')),
                ('model_path', models.CharField(help_text='Path to saved model files', max_length=500)),
                ('preprocessor_path', models.CharField(blank=True, help_text='Path to preprocessor files', max_length=500)),
                ('scaler_path', models.CharField(blank=True, help_text='Path to scaler files', max_length=500)),
                ('performance_metrics', models.JSONField(default=dict, help_text='Model performance statistics')),
                ('threshold', models.FloatField(blank=True, help_text='Anomaly detection threshold', null=True)),
                ('training_data_size', models.IntegerField(default=0)),
                ('training_duration', models.FloatField(blank=True, help_text='Training duration in seconds', null=True)),
                ('features_used', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='List of features used for training', size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trained_at', models.DateTimeField(blank=True, null=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomaly_models',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['model_type', 'status'], name='anomaly_mod_model_t_77e5a1_idx'), models.Index(fields=['status'], name='anomaly_mod_status_5af653_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnomalyDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('anomaly_score', models.FloatField(help_text='Anomaly score from 0 to 1')),
                ('confidence', models.FloatField(help_text='Confidence level of detection')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('new', 'New'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='new', max_length=20)),
                ('metric_values', models.JSONField(help_text='Actual metric values at time of anomaly')),
                ('features_contributing', models.JSONField(default=list, help_text='Features that contributed most to anomaly')),
                ('expected_values', models.JSONField(default=dict, help_text='Expected normal values')),
                ('deviation_percentages', models.JSONField(default=dict, help_text='Deviation from normal in percentage')),
                ('description', models.TextField(blank=True, help_text='Auto-generated description of anomaly')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Tags for categorization', size=None)),
                ('individual_scores', models.JSONField(default=dict, help_text='Scores from individual models in ensemble')),
                ('model_agreement', models.FloatField(blank=True, help_text='Agreement between models', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anomalies', to='metrics.server')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detections', to='anomalies.anomalymodel')),
            ],
            options={
                'db_table': 'anomaly_detections',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['server', '-timestamp'], name='anomaly_det_server__b6bc54_idx'), models.Index(fields=['severity', 'status'], name='anomaly_det_severit_94718a_idx'), models.Index(fields=['timestamp'], name='anomaly_det_timesta_9fc2d7_idx'), models.Index(fields=['anomaly_score'], name='anomaly_det_anomaly_ea68c5_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnomalyPrediction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prediction_type', models.CharField(choices=[('short_term', 'Short Term (1-24 hours)'), ('medium_term', 'Medium Term (1-7 days)'), ('long_term', 'Long Term (1-30 days)')], max_length=20)),
                ('predicted_timestamp', models.DateTimeField(help_text='When anomaly is predicted to occur')),
                ('probability', models.FloatField(help_text='Probability of anomaly occurring (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('confidence_interval', models.JSONField(default=dict, help_text='Confidence intervals for the prediction')),
                ('predicted_metrics', models.JSONField(help_text='Predicted metric values')),
                ('risk_factors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Identified risk factors', size=None)),
                ('recommendations', models.JSONField(default=list, help_text='Recommended actions')),
                ('forecast_data', models.JSONField(default=dict, help_text='Full forecast time series data')),
                ('seasonality_detected', models.BooleanField(default=False)),
                ('trend_direction', models.CharField(choices=[('increasing', 'Increasing'), ('decreasing', 'Decreasing'), ('stable', 'Stable')], default='stable', max_length=20)),
                ('is_validated', models.BooleanField(default=False)),
                ('actual_occurred', models.BooleanField(blank=True, null=True)),
                ('validation_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='anomalies.anomalymodel')),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anomaly_predictions', to='metrics.server')),
            ],
            options={
                'db_table': 'anomaly_predictions',
                'ordering': ['predicted_timestamp'],
                'indexes': [models.Index(fields=['server', 'predicted_timestamp'], name='anomaly_pre_server__757533_idx'), models.Index(fields=['prediction_type'], name='anomaly_pre_predict_25d21f_idx'), models.Index(fields=['probability'], name='anomaly_pre_probabi_e9da7b_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnomalyReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('daily', 'Daily Report'), ('weekly', 'Weekly Report'), ('monthly', 'Monthly Report'), ('custom', 'Custom Report'), ('incident', 'Incident Report')], max_length=20)),
                ('report_period_start', models.DateTimeField()),
                ('report_period_end', models.DateTimeField()),
                ('executive_summary', models.TextField(help_text='High-level summary of findings')),
                ('total_anomalies', models.IntegerField(default=0)),
                ('critical_anomalies', models.IntegerField(default=0)),
                ('high_anomalies', models.IntegerField(default=0)),
                ('medium_anomalies', models.IntegerField(default=0)),
                ('low_anomalies', models.IntegerField(default=0)),
                ('predictions_made', models.IntegerField(default=0)),
                ('predictions_accuracy', models.FloatField(blank=True, null=True)),
                ('false_positive_rate', models.FloatField(blank=True, null=True)),
                ('top_risk_metrics', models.JSONField(default=list, help_text='Metrics with highest anomaly risk')),
                ('trend_analysis', models.JSONField(default=dict, help_text='Trend analysis results')),
                ('pattern_insights', models.JSONField(default=list, help_text='Detected patterns and insights')),
                ('immediate_actions', models.JSONField(default=list, help_text='Recommended immediate actions')),
                ('preventive_measures', models.JSONField(default=list, help_text='Recommended preventive measures')),
                ('monitoring_adjustments', models.JSONField(default=list, help_text='Suggested monitoring improvements')),
                ('generated_by', models.CharField(default='system', max_length=100)),
                ('report_data', models.JSONField(default=dict, help_text='Complete report data for visualization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anomaly_reports', to='metrics.server')),
            ],
            options={
                'db_table': 'anomaly_reports',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['server', 'report_type'], name='anomaly_rep_server__32ecca_idx'), models.Index(fields=['report_period_start', 'report_period_end'], name='anomaly_rep_report__a725d6_idx')],
            },
        ),
        migrations.CreateModel(
            name='CorrelationAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_period_start', models.DateTimeField()),
                ('analysis_period_end', models.DateTimeField()),
                ('metric_types_analyzed', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), help_text='Types of metrics included in analysis', size=None)),
                ('correlation_matrix', models.JSONField(help_text='Full correlation matrix between metrics')),
                ('strong_correlations', models.JSONField(default=list, help_text='List of strongly correlated metric pairs')),
                ('anomaly_correlations', models.JSONField(default=dict, help_text='Correlations between metrics and anomaly occurrences')),
                ('top_anomaly_indicators', models.JSONField(default=list, help_text='Metrics that are best predictors of anomalies')),
                ('seasonal_patterns', models.JSONField(default=dict, help_text='Detected seasonal patterns in metrics')),
                ('anomaly_clusters', models.JSONField(default=list, help_text='Identified clusters of related anomalies')),
                ('total_anomalies_analyzed', models.IntegerField(default=0)),
                ('analysis_confidence', models.FloatField(help_text='Confidence level of analysis results')),
                ('statistical_significance', models.JSONField(default=dict, help_text='P-values and significance tests results')),
                ('summary_report', models.TextField(help_text='Auto-generated summary of findings')),
                ('recommendations', models.JSONField(default=list, help_text='Recommended monitoring strategies')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='correlation_analyses', to='metrics.server')),
            ],
            options={
                'db_table': 'correlation_analyses',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['server', '-created_at'], name='correlation_server__30f550_idx'), models.Index(fields=['analysis_period_start', 'analysis_period_end'], name='correlation_analysi_d7402b_idx')],
            },
        ),
        migrations.CreateModel(
            name='FeatureImportance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feature_scores', models.JSONField(help_text='Feature importance scores')),
                ('feature_ranking', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), help_text='Features ranked by importance', size=None)),
                ('analysis_method', models.CharField(choices=[('permutation', 'Permutation Importance'), ('shap', 'SHAP Values'), ('lime', 'LIME Analysis'), ('feature_ablation', 'Feature Ablation')], default='permutation', max_length=50)),
                ('data_period_start', models.DateTimeField()),
                ('data_period_end', models.DateTimeField()),
                ('sample_size', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feature_importances', to='anomalies.anomalymodel')),
            ],
            options={
                'db_table': 'feature_importances',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['model', '-created_at'], name='feature_imp_model_i_5cc7d2_idx')],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.FloatField()),
                ('precision', models.FloatField()),
                ('recall', models.FloatField()),
                ('f1_score', models.FloatField()),
                ('auc_roc', models.FloatField()),
                ('false_positive_rate', models.FloatField()),
                ('false_negative_rate', models.FloatField()),
                ('detection_latency', models.FloatField(help_text='Average detection latency in seconds')),
                ('test_data_size', models.IntegerField()),
                ('evaluation_period_start', models.DateTimeField()),
                ('evaluation_period_end', models.DateTimeField()),
                ('evaluated_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_history', to='anomalies.anomalymodel')),
            ],
            options={
                'db_table': 'model_performance_metrics',
                'ordering': ['-evaluated_at'],
                'indexes': [models.Index(fields=['model', '-evaluated_at'], name='model_perfo_model_i_791e6e_idx')],
            },
        ),
        migrations.CreateModel(
            name='ThresholdOptimization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('threshold_value', models.FloatField()),
                ('optimization_metric', models.CharField(choices=[('f1_score', 'F1 Score'), ('precision', 'Precision'), ('recall', 'Recall'), ('balanced', 'Balanced Precision-Recall')], default='f1_score', max_length=50)),
                ('precision', models.FloatField()),
                ('recall', models.FloatField()),
                ('f1_score', models.FloatField()),
                ('false_positive_rate', models.FloatField()),
                ('false_negative_rate', models.FloatField()),
                ('test_data_size', models.IntegerField()),
                ('test_period_start', models.DateTimeField()),
                ('test_period_end', models.DateTimeField()),
                ('is_selected', models.BooleanField(default=False)),
                ('selection_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='threshold_optimizations', to='anomalies.anomalymodel')),
            ],
            options={
                'db_table': 'threshold_optimizations',
                'ordering': ['-f1_score'],
                'indexes': [models.Index(fields=['model', '-f1_score'], name='threshold_o_model_i_4d266a_idx'), models.Index(fields=['is_selected'], name='threshold_o_is_sele_4428f2_idx')],
            },
        ),
        migrations.CreateModel(
            name='TrainingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('training_config', models.JSONField(help_text='Training parameters and configuration')),
                ('data_range_start', models.DateTimeField(help_text='Start of training data range')),
                ('data_range_end', models.DateTimeField(help_text='End of training data range')),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='queued', max_length=20)),
                ('progress', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('training_logs', models.TextField(blank=True, help_text='Training process logs')),
                ('error_message', models.TextField(blank=True)),
                ('final_metrics', models.JSONField(default=dict, help_text='Final training metrics')),
                ('cpu_usage', models.FloatField(blank=True, null=True)),
                ('memory_usage', models.FloatField(blank=True, null=True)),
                ('gpu_usage', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, help_text='Job duration in seconds', null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='anomalies.anomalymodel')),
                ('servers', models.ManyToManyField(related_name='training_jobs', to='metrics.server')),
            ],
            options={
                'db_table': 'training_jobs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status'], name='training_jo_status_20fc5c_idx'), models.Index(fields=['-created_at'], name='training_jo_created_8d1c09_idx')],
            },
        ),
    ]

[supervisord]
nodaemon=true
user=root ; Supervisord itself runs as root to manage processes

[program:gunicorn]
; Lance le serveur ASGI avec Gunicorn et Uvicorn pour gérer HTTP et WebSocket
command=gunicorn core.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --workers 1 --worker-connections 1000 --log-level info
directory=/app
autostart=true
autorestart=true
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
user=app_user ; Run gunicorn as the non-root user

# [program:unified_collector]
# ; Single process that collects all metrics from all servers
# command=python manage.py collect_all_servers --interval 5 --sync-interval 300
# directory=/app
# autostart=true
# autorestart=true
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# user=app_user
# stopwaitsecs=30
# ; Restart if it crashes
# startsecs=10

# [program:unified_consumer]
# ; Single consumer that handles all metric types from all servers
# command=python manage.py start_unified_consumer
# directory=/app
# autostart=true
# autorestart=true
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# user=app_user
# stopwaitsecs=30
# startsecs=10




# [program:collect_vmstat]
# ; Lance le script de collecte des métriques en arrière-plan
# command=python manage.py collect_vmstat
# directory=/app
# autostart=true
# autorestart=true
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# user=app_user ; Run collector as the non-root user
# stopwaitsecs=10 ; Laisse le temps pour un arrêt propre

# [program:collect_iostat]
# ; Lance le script de collecte des métriques en arrière-plan
# command=python manage.py collect_iostat
# directory=/app
# autostart=true
# autorestart=true
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# user=app_user ; Run collector as the non-root user
# stopwaitsecs=10 ; Laisse le temps pour un arrêt propre

# [program:collect_netstat]
# ; Lance le script de collecte des métriques en arrière-plan
# command=python manage.py collect_netstat
# directory=/app
# autostart=true
# autorestart=true
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# user=app_user ; Run collector as the non-root user
# stopwaitsecs=10 ; Laisse le temps pour un arrêt propre

# [program:collect_process]
# ; Lance le script de collecte des métriques en arrière-plan
# command=python manage.py collect_process
# directory=/app
# autostart=true
# autorestart=true
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# user=app_user ; Run collector as the non-root user
# stopwaitsecs=10 ; Laisse le temps pour un arrêt propre

# [program:start_consumer]
# ; Lance le script consommateur Kafka en arrière-plan
# ; Assurez-vous que cette commande existe et lance bien votre consommateur Kafka
# command=python manage.py start_consumer
# directory=/app
# autostart=true
# autorestart=true
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# user=app_user ; Run consumer as the non-root user
# stopwaitsecs=10 ; Laisse le temps pour un arrêt propre

